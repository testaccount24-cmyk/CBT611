/*rexx*/
ADDRESS ISPEXEC
"CONTROL ERRORS RETURN"

Call inittool

"VGET ( tabldsn ) ASIS"
"VGET ( skllib ) ASIS"
"VGET ( pnllib ) ASIS"
"VGET ( rexxlib ) ASIS"

ADDRESS ISPEXEC
"LIBDEF ISPPLIB DATASET ID('"pnllib"') UNCOND"
IF RC \= 0 THEN DO
   SAY "S--> LIBDEF  FAILED FOR ISPPLIB .RC="RC
   SAY ZERRLM
   SIGNAL MAIN_EXIT
END

"LIBDEF ISPTLIB DATASET ID('"tabldsn"') UNCOND"
if rc \= 0 then do
    say 'S-> LIBDEF failed on DD ISPTLIB. RC = ' rc
    say "S-> Dataset name = '" tabldsn "'"
    say 'S-> Terminating application'
    exit
end
"LIBDEF ISPTABL DATASET ID('"tabldsn"') UNCOND"
if rc \= 0 then do
    say 'S-> LIBDEF failed on DD ISPTABL. RC = ' rc
    say "S-> Dataset name = '" tabldsn "'"
    say 'S-> Terminating application'
    exit
end

skeldsn = skllib
"LIBDEF ISPSLIB DATASET ID('"skeldsn"') UNCOND"
if rc \= 0 then do
    say 'S-> LIBDEF failed on DD ISPTABL. RC = ' rc
    say "S-> Dataset name = '" tabldsn "'"
    say 'S-> Terminating application'
    exit
end

IF sysdsn(temp.schd.ps) Â¬= 'OK' Then Do
   Address tso
   "alloc da(temp.schd.ps) dsorg(ps) lrecl(80)",
       "recfm(f,b) blksize(27920) space(50,50) new"
End

Address ispexec
"LIBDEF ISPFILE DATASET ID("temp.schd.ps")"
if rc \= 0 then do
   say "s--> libdef  failed for ispfile .rc="rc
   say zerrlm
   signal main_exit
end

"TBERASE "basetbl
basetbl = 'basetbl'
"TBOPEN "basetbl
orc = rc
select
   when orc = 0 then nop
   when orc = 8 then do
     "TBCREATE "basetbl",
      Names(seq",
           "basjbnam ",
           "jbfunc)",
        "WRITE"
        if rc \= 0 then do
          say "S-> TBCREATE failed for table "basetbl".RC="rc
          Say zerrlm
          signal main_exit
        end
     "TBSORT "basetbl" FIELDS(seq,n,a)"
   end
   otherwise do
      say "S-> TBOPEN failed for table "basetbl".RC="orc
      Say zerrlm
      signal main_exit
   end
end
if rc \= 0 then do
    say 'W-> TBOPEN failed for table 'basetbl'. RC = ' rc
    basflag = 0
end
trigtbl = 'trigtbl'
"TBERASE "trigtbl
"TBOPEN "trigtbl
orc = rc
select
   when orc = 0 then nop
   when orc = 8 then do
     "TBCREATE "trigtbl",
      Names(trigjbnm",
        "targjbnm)",
        "WRITE"
        if rc \= 0 then do
          say "S-> TBCREATE failed for table "basetbl".RC="rc
          Say zerrlm
          signal main_exit
        end
   end
   otherwise do
      say "S-> TBOPEN failed for table "basetbl".RC="orc
      Say zerrlm
      signal main_exit
   end
end
if rc \= 0 then do
    say 'W-> TBOPEN failed for table 'basetbl'. RC = ' rc
    triflag = 0
end
depdtbl = 'depdtbl'
"TBERASE "depdtbl
"TBOPEN "depdtbl
orc = rc
select
   when orc = 0 then nop
   when orc = 8 then do
     "TBCREATE "depdtbl",
      Names(srcjbnm ",
        "depdjbnm)",
        "WRITE"
        if rc \= 0 then do
          say "S-> TBCREATE failed for table "basetbl".RC="rc
          Say zerrlm
          signal main_exit
        end
   end
   otherwise do
      say "S-> TBOPEN failed for table "basetbl".RC="orc
      Say zerrlm
      signal main_exit
   end
end
if rc \= 0 then do
    say 'W-> TBOPEN failed for table 'basetbl'. RC = ' rc
    depflag = 0
end
jbsttbl = 'jbsttbl'
"TBERASE "jbsttbl
"TBOPEN "jbsttbl
orc = rc
select
   when orc = 0 then nop
   when orc = 8 then do
     "TBCREATE "jbsttbl",
      Names(runingjb",
        "jbstatus)",
        "WRITE"
        if rc \= 0 then do
          say "S-> TBCREATE failed for table "jbsttbl".RC="rc
          Say zerrlm
          signal main_exit
        end
   end
   otherwise do
      say "S-> TBOPEN failed for table "jbsttbl".RC="orc
      Say zerrlm
      signal main_exit
   end
end
if rc \= 0 then do
    say 'W-> TBOPEN failed for table 'jbsttbl'. RC = ' rc
    depflag = 0
end
jobtbl = 'jobtbl'
"TBOPEN "jobtbl "write"
orc = rc
select
   when orc = 0 then nop
   when orc = 8 then do
     "TBCREATE "jobtbl",
      Names(parent  ",
        "child   ",
        "ty)",
        "WRITE"
        if rc \= 0 then do
          say "S-> TBCREATE failed for table "jobtbl".RC="rc
          Say zerrlm
          signal main_exit
        end
   end
   otherwise do
      say "S-> TBOPEN failed for table "jobtbl".RC="orc
      Say zerrlm
      signal main_exit
   end
end

"tbtop " jobtbl
"tbskip " jobtbl
skiprc = rc
if skiprc = 0 then do
   Call Decide_upon
   If option = 'M' then do
       Call disp_tbl
   End
   Call Disp_gentab
   signal main_exit
end

"DISPLAY PANEL(USERENTY)"
disprc = rc
if rc > 8 then do
   say "s--> display failed.rc="rc
   say zerrlm
   signal main_exit
end
do while disprc = 0
  do i = 1 to 12
    parent = value(p||i)
    child = value(c||i)
    ty = value(t||i)
    if strip(parent) = '' then do
       if strip(child) = '' then do
         if strip(ty) = '' then do
         leave
         end
       end
    end
    else do
    "tbadd " jobtbl
    end
  end
  "Display panel(userenty)"
  disprc = rc
  if rc > 8 then do
     say "s--> display failed.rc="rc
     say zerrlm
     signal main_exit
  end
end
Call disp_tbl
Call Disp_gentab
Signal main_exit

Decide_upon:
    "Display panel(decnpnl)"
    disprc = rc
    If disprc = 8 then do
        Say "I -> Exiting the scheduling process"
        Signal main_exit
    End
Return
disp_tbl:
"TBTOP "  jobtbl
"TBDISPL "jobtbl" PANEL(THROTBL)"
If rc > 8 Then Do
   Say "S-> Error when processing panel THROTBL rc = "rc,
       " Execution terminated..."
   Say zerrlm
   Signal main_exit
End
dispcc = rc

If dispcc < 8 then do
   Call process_selected_rows
End
return
Disp_gentab:
    Call Generate_Master_tables
    Confirm = ' '
    panelvar = "Submit Scheduler JOB   "
    paneltxt = "Y for Submit, R for Restart"
    "Display Panel(GENTAB)"
    If Confirm = 'Y' then do
        Say "I -> Submitting the Scheduler"
        skelvar = 'SCHDJCL'
        Call skel_call
        Address tso "submit "temp.schd.ps
        Say "I -> Please view the jobstatus in spool"
        Signal main_exit
    End
    If Confirm = 'R' then do
        panelvar = "Restart job name       "
        paneltxt = " "
        Confirm = " "
        "Display Panel(RSRTPAN)"
        If rc = 0 then do
            rstrmem = rsrtjb
            Say "I -> Restarting with job "RSTRMEM
            skelvar = 'SCHRSTRT'
            Call skel_call
            Address tso "Submit "temp.schd.ps
            Say "I -> Please view the jobstatus in spool"
            Signal main_exit
        End
    End

Return
process_selected_rows:

  Do while ztdsels >= 0 & dispcc < 8
     Select
       When psel = '/' Then Do
         "TBPUT " jobtbl
       End
       When psel = 'A' Then Do
         "TBTOP " jobtbl
         "TBSCAN " jobtbl "ARGLIST(parent,child,ty)"
         cc = rc
         if cc = 0 then do
            parent = value(pj)
            child = value(cj)
            ty = value(tp)
            "TBADD " jobtbl
            if rc \=0 then do
              say 'tbadd failed , rc - ' rc
              signal main_exit
            end
         End
       End
       when psel = 'D' then do
         "TBDELETE " jobtbl
       End
       Otherwise do
         "TBTOP "  jobtbl
         "TBSKIP " jobtbl
         If rc > 0 then do
             parent = 'smjob  '
             child  = 'smjob  '
                ty  = 't'
             "TBADD " jobtbl
             If rc > 0 then do
                 Say "S -> Add on table failed " jobtbl
                 Signal main_exit
             End
         End
       End
     End

     "TBDISPL "jobtbl
     dispcc = rc
     If dispcc = 8 Then Leave
  End
Return

Generate_Master_tables:

    /*Create all the master tables*/

    Call Open_tables

    "TBTOP " jobtbl
    "TBTOP " basetbl
    "TBTOP " trigtbl
    "TBTOP " depdtbl
    "TBTOP " jbsttbl
    cntr = 0
    "TBSKIP "jobtbl
    Skiprc = rc
    If Skiprc > 0 Then Do
        Say "S-> Error Reading table "jobtbl "rc"rc
        Signal main_exit
    End
    Do While Skiprc = 0
       If Cntr = 0 then do
          Cntr = Cntr + 1
          Seq  = Cntr
          basjbnam = child
          jbfunc   = 'T'
          "TBADD "basetbl "ORDER"
          Addrc = rc
          If Addrc > 0 Then Do
              Say "S-> Error Adding table "basetbl "rc"rc
              Signal main_exit
          End
       End
       Else do
          Cntr = Cntr + 1
          If ty = 'T' then do
              trigjbnm = parent
              targjbnm = child
              "TBADD "trigtbl
              Addrc = rc
              If Addrc > 0 Then Do
                  Say "S-> Error Reading table "trigtbl "rc"rc
                  Signal main_exit
              End
              runingjb = parent
              Call Update_job_status_table
              runingjb = child
              Call Update_job_status_table
          End
          If ty = 'D' then do
              Srcjbnm = child
              depdjbnm = parent
              "TBADD "depdtbl
              Addrc = rc
              If Addrc > 0 Then Do
                  Say "S-> Error Reading table "trigtbl "rc"
                  Signal main_exit
              End
              runingjb = parent
              Call Update_job_status_table
              runingjb = child
              Call Update_job_status_table
              Seq = Cntr
              basjbnam = child
              jbfunc = 'D'
              "TBSARG "basetbl "NAMECOND(basjbnam,EQ)"
              "TBTOP  "basetbl
              "TBSCAN "basetbl "ARGLIST(basjbnam)"
              Scanrc = rc
              If Scanrc \= 0 then do
                  "TBADD "basetbl "ORDER"
                  Addrc = rc
                  If Addrc > 0 Then Do
                      Say "S-> Error Reading table "basetbl "rc"
                      Signal main_exit
                  End
              End
          End
       End
      "TBSKIP "jobtbl
      Skiprc = rc
      End
      Seq      = 999
      basjbnam = 'DUMMY'
      jbfunc       = 'D'
      "TBADD "basetbl "ORDER"
      Addrc = rc
      If Addrc > 0 Then Do
          Say "S-> Error Adding table "basetbl "rc"rc
          Signal main_exit
      End
Return

Update_job_status_table:

   "TBSARG "jbsttbl "NAMECOND(runingjb,EQ)"
   "TBTOP  "jbsttbl
   "TBSCAN "jbsttbl "ARGLIST(runingjb)"
   Scanrc = rc
   If Scanrc  \= 0 then do
       jbstatus = 'S'
       "TBBOTTOM "jbsttbl "NOREAD"
       "TBADD "   jbsttbl
       If Addrc > 0 Then Do
           Say "S-> Error Adding to table "jbsttbl "rc"rc
           Signal main_exit
       End
   End
Return

Open_tables:

    basetbl= 'BASETBL'
    "TBCLOSE "basetbl
    "TBOPEN "basetbl" WRITE"
    If rc > 0 Then Do
        Say "S-> Error opening table "basetbl "rc"rc
        Signal main_exit
    End
    "TBSORT "basetbl" FIELDS(seq,n,a)"
    "TBCLOSE "trigtbl
    "TBOPEN " trigtbl "WRITE"
    If rc > 0 Then Do
        Say "S-> Error opening table "trigtbl "rc"rc
        Signal main_exit
    End
    "TBCLOSE "depdtbl
    "TBOPEN " depdtbl "WRITE"
    If rc > 0 Then Do
        Say "S-> Error opening table "depdtbl "rc"rc
        Signal main_exit
    End
    "TBCLOSE "jbsttbl
    "TBOPEN " jbsttbl "WRITE"
    If rc > 0 Then Do
        Say "S-> Error opening table "depdtbl "rc"rc
        Signal main_exit
    End
Return

skel_call:
address ispexec
"ftclose"
"ftopen"
if rc \= 0 then do
   say "s--> ftopen failed for "skelvar".rc="rc
   say zerrlm
   signal main_exit
end
"ftincl "skelvar""
if rc \= 0 then do
   say "s--> ftincl failed for "skelvar".rc="rc
   say zerrlm
   signal main_exit
end

"ftclose "
if rc \= 0 then do
   say "s--> ftclose failed for "skelvar".rc="rc
   say zerrlm
   signal main_exit
end
return
main_exit:
"tbclose " basetbl
"tbclose " jobtbl
"tbclose " trigtbl
"tbclose " depdtbl
"tbclose " jbsttbl
"LIBDEF ISPTLIB"
"LIBDEF ISPTABL"
"LIBDEF ISPPLIB"
"LIBDEF ISPSLIB"
"LIBDEF ISPFILE"
y = msg("OFF")
  "delete temp.schd.ps nonvsam"      /* Delete the temporary dataset */
y = msg(y)
exit
